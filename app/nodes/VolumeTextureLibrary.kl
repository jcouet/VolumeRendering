/**************************************************************************************************/
/*                                                                                                */
/*  Informations :                                                                                */
/*      This code is part of the project VolumeRendering                                          */
/*                                                                                                */
/*  Contacts :                                                                                    */
/*      couet.julien@gmail.com                                                                    */
/*      benyoub.anis@gmail.com                                                                    */
/*                                                                                                */
/**************************************************************************************************/

require Math;
require FileIO;
require Images;
require OpenImageIO;


/**************************************************************************************************/
/*                                             1. Texture Test                                    */
inline ConvertTo3DIndex(
  Index p, 
  Index w,
  Index h,
  io Index i, 
  io Index j, 
  io Index k) 
{ 
  k = p / (w * h);
  j = (p / h) % w;
  i = p % w;
}

operator CreateTextureTest_task<<<p>>>(
  Index nb_els,
  io Image2DVolume texture) 
{
  Color color(0,0,0,0);

  Index i, j, k;
  ConvertTo3DIndex(p, nb_els, nb_els, i, j, k);

  color.b = (k<nb_els/2)?Float32(k):Float32(nb_els-k); 
  color.g = (j<nb_els/2)?Float32(j):Float32(nb_els-j); 
  color.r = (i<nb_els/2)?Float32(i):Float32(nb_els-i); 

  Float32 distance = sqrt(  
    (Float32(nb_els/2)-color.b)*(Float32(nb_els/2)-color.b) + 
    (Float32(nb_els/2)-color.r)*(Float32(nb_els/2)-color.r) + 
    (Float32(nb_els/2)-color.g)*(Float32(nb_els/2)-color.g));

  color = Color(0, 0, 0, 0);
  if(distance < nb_els/6)
  {
    color.a = 0.75; 
    color.b = 1;
    color.g = 1;
  }

  else if( (distance > nb_els/3) && (distance < nb_els/2) )
  {
    color.a = 0.25; 
    color.r = 0.75;
    color.g = 0.25;
  }
 
  texture.setPixel(p, color);
}

operator createTextureTest(
  io Boolean dirty,
  io Image2DVolume texture)
{   
  if(dirty) 
  {
    Index nb_els = 128;
    texture.resize(nb_els, nb_els, nb_els);
    CreateTextureTest_task<<<nb_els*nb_els*nb_els>>>(nb_els, texture);
    dirty = false;
  }     
}
/*                                            end Texture Test                                    */
/**************************************************************************************************/

                                          /***********************/

/**************************************************************************************************/
/*                                                2. Pixels                                       */
inline Boolean LoadColorImageData(
  String filePath,
  String ext,
  io UInt32 imageWidth,
  io UInt32 imageHeight,
  io Color pixels[],
  io Size usedMemory) 
{
  if(filePath.length() == 0 || ext.length() == 0)
    return false;

  OpenImageInput image = OpenImageInput();
  image.open(filePath);
  if(image.valid()) 
  {
    OpenImageTypeDesc desc = OpenImageTypeDesc(OpenImage_BASETYPE_FLOAT, OpenImage_AGGREGATE_SCALAR, OpenImage_VECSEMANTICS_NOXFORM);

    OpenImageSpec spec = image.spec();
    imageWidth = spec.get_full_width();
    imageHeight = spec.get_full_height();
    Boolean success = false;

    if(spec.get_nchannels() == 4) 
    {
      pixels.resize(imageWidth * imageHeight);
      Data data = pixels.data();
      success = image.read_image(desc, data, 0, 0, 0);
    } 

    else if(spec.get_nchannels() == 3) 
    {
      Float32 floats[];
      floats.resize(imageWidth * imageHeight * spec.get_nchannels());
      Data data = floats.data();
      success = image.read_image(desc, data, 0, 0, 0);
      if(success) 
      {
        pixels.resize(imageWidth * imageHeight);
        Size offset = 0;
        for(Size i=0;i<pixels.size();i++) 
        {
          pixels[i].r = floats[offset++];
          pixels[i].g = floats[offset++];
          pixels[i].b = floats[offset++];
          pixels[i].a = 1.0;
        }
      }
    }

    if(!success) 
    {
      imageWidth = 0;
      imageHeight = 0;
      pixels.resize(0);
      setError("Image2D '"+filePath+"' could not be converted to Color.");
    } 
    else 
    {
      usedMemory = pixels.dataSize();
      queueStatusMessage('Image2DLoaded', "{'filepath': '"+filePath+"', 'usedMemory': "+usedMemory+"}");
    }
  } 

  else 
  {
    setError("Image2D '"+filePath+"' could not be opened!");
    return false;
  }
  return true;
}

operator ReadImagePixels_task<<<p>>>(
  Index k,
  Index w, 
  Index h,
  Color pixels[],
  io Image2DVolume texture) 
{
  Index j = p/w;
  Index i = p%w;
  texture.setPixel(k*w*h + j*w + i, pixels[p]);
}

operator createTextureFromImage(
  String path,
  io Boolean dirty,
  io Image2DVolume texture)
{   
  Color pixels[];
  Image2DColor image();
  UInt32 width, heigth, depth, usedMemory;

  if(dirty) 
  {
    FilePath file_path(path);
    FilePath file_paths[] = file_path.parentPath().getSubPaths();
    for(Index i=0; i<file_paths.size(); ++i)
    {
      if(file_paths[i].extension() == ".jpg")
      {
        if(depth == 0)
        {
          LoadColorImageData(
            file_paths[i].string(), 
            "jpg", 
            width, 
            heigth, 
            pixels,
            usedMemory); 
        }
        ++depth;    
      }
    }

    texture.resize(width, heigth, depth);
    depth = 0;
    for(Index i=0; i<file_paths.size(); ++i)
    {
      if(file_paths[i].extension() == ".jpg")
      {
        LoadColorImageData(
          file_paths[i].string(), 
          "jpg", 
          width, 
          heigth, 
          pixels,
          usedMemory); 
        
        ReadImagePixels_task<<<pixels.size()>>>(depth, width, heigth, pixels, texture);
        ++depth;    
      }
    }

    dirty = false;
  }    
}
/*                                       end Constructor/Destructor                               */
/**************************************************************************************************/
 